---
import FormStyles from './Form.module.css';
import { p, _parseRecords } from '../lib/getRecords'
import { useSanityClient } from 'astro-sanity';

type RecordUpload = {
    _type: string;
    name: string;
    description: string;
}

const token = import.meta.env.SANITY_TOKEN;
const t = (obj:unknown) => Object.prototype.toString.call(obj)
let successId = ""
if (Astro.request.method === 'POST') {
    const client = useSanityClient();

    const results:RecordUpload = {
        _type: 'collection',
        name: '',
        description: ''
    };
    let records:string[][] = [];
    const entries = (await Astro.request.formData()).entries();
    
    for (const [key, value] of entries) {
        console.log({ key, i: key.indexOf('record') });
        if (key.indexOf('record') > -1) {

            const entryRecords = JSON.parse(value as string) as {}[];
            records.push(entryRecords.map(record => JSON.stringify(record)));
        } else {
            results[key] = value;
        }
    }
    
    const { name, description, _type } = results;
    
    const result = await client.create<RecordUpload>({
        _type,
        name,
        description
    }, {
        token
    });

    const { _id } = result;
    successId = _id;

    type RecordGroup = {
        _type: string;
        name: string;
        reference: string;
        group: string[];
    }
    
    if (records?.length > 0) {
        
        await Promise.all(records.map(async (recordGroup, i) => await client.create<RecordGroup>({
            _type: 'patient-group',
            reference: _id,
            name: `${name} - ${_id}`,
            group: recordGroup
        }, {
            token
        }))).catch((error) => {
            console.error(error);
        })
    }


    Astro.cookies.set('document-id', _id);
}
---
<form action={Astro.url.href} method="POST" enctype="multipart/form-data" class={FormStyles.gridForm} data-success-id={successId || null}>
    <label for="name">Name
        <input type="text" name="name" id="name" -required />
    </label>
    <label for="description">Description
        <textarea name="description" id="description"></textarea>
    </label>
    <label for="csv">File (Must be .csv format, .xls will not work.)
        <input type="file" name="csv" id="csv" -required accept=".csv" />
    </label>
    <div>
        <div class="tags-list">
            <p>Select columns to be deleted before final upload.</p>
        </div>
    </div>
    <div id="hiddenChunks">

    </div>
    <div class="col-form">
        <button class="btn">Create Dataset</button>
    </div>
</form>
<script>
    /// <reference types="../../index.d.ts" />
    import Papa from 'papaparse';

    type ParsedRecord = Record<string, string|number>;

    const patientColumnsToRemove = [
        'Age Group',
        'Work Phone',
        'Home Phone',
        'Cell Phone',
        'Characteristic',
        'Deceased',
        'Deceased Date',
        'Registration Date',
        'Registry Enabled',
        'Email',
        'Email Not Provided Reason',
        'Text Enabled',
        'Voice Enabled',
        'Web Enabled',
        'Demographic Employer Name',
        'Demographic Employment Status',
    ].map(v => 'Patient '+v);

    const employeeColumnsToRemove = [
        'Job Category',
        'Hourly Rate'
    ];

    const employerColumnsToRemove = [
        'Status',
        'Phone No',
        'Fax No',
        'E-mail',
    ].map(v => 'Employer '+v);

    const guarantorColumnsToRemove = [
        'Acct No',
        'Name',
        'Mailing Address Line 1',
        'Mailing Address Line 2',
        'Mailing City',
        'Mailing State',
        'Mailing ZIP Code',
        'Phone No'
    ].map(v => 'Guarantor '+v);

    const genericColumnsToRemove = [
        'Name',
        'Address Line 1',
        'Address Line 2',
        'City',
        'State',
        'ZIP Code',
        'Subscriber No',
        'Group Name',
        'Group No',
        'Class',
        'Insurance Group Name'
    ];

    const primaryInsurColumnsToRemove = genericColumnsToRemove.map(v => 'Primary Insurance '+v);
    const secondaryInsurColumnsToRemove = genericColumnsToRemove.map(v => 'Secondary Insurance '+v);

    const columnsToRemove = [
        ...employeeColumnsToRemove,
        ...employerColumnsToRemove,
        ...patientColumnsToRemove,
        ...guarantorColumnsToRemove,
        ...primaryInsurColumnsToRemove,
        ...secondaryInsurColumnsToRemove
    ]

    const file = document.getElementById('csv') as HTMLInputElement;
    const list = document.querySelector('.tags-list');
    const form = document.querySelector('form');
    
    if (form.dataset.successId !== undefined) {
        localStorage.setItem('document-id', form.dataset.successId);
    }

    // const records = document.querySelector<HTMLInputElement>('#records');
    const hiddenChunks = document.querySelector<HTMLDivElement>('#hiddenChunks');
    const _data:string[] = [];
    // const _file = [];
    const _headers = [];
    let _records = [] as {}[];

    const chunk = <T,>(arr: T[], size:number):T[][] => (
        arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), [] as T[][])
    )

    const addHiddenInputs = (records: {}[]) => {
        hiddenChunks.innerHTML = '';
        const _chunkRecords = chunk(records, 200);

        _chunkRecords.map((recordChunk, i) => {
            i += 1;
            const hInput = Object.assign(document.createElement('input'), {
                type: 'hidden',
                name: 'record['+i+']',
                value: JSON.stringify(recordChunk)
            })

            hiddenChunks.append(hInput);
        });
    }

    /**
     * data should not include the headers row
     */
    const generateRecords = () => {
        if (_data.length === 0) throw new Error('Missing data to transform');
        if (_headers.length === 0) throw new Error('Missing headers to transform');

        /**
         * _data should be an array of string arrays, but it isn't set as one in the type,
         * this should be remedied at some point.
         */
        const transformedRecords = (_data as unknown as string[][]).map((data:string[]) => {
            
            const temp = {};
            _headers.forEach((h:string, i:number) => {
                if (columnsToRemove.indexOf(h) > -1) return
                temp[h] = data[i];
            })
            return temp;
        });

        addHiddenInputs(transformedRecords);
    }

    file.addEventListener('change', () => {
        if (file.files.length === 0) return;
        
        const upload = file.files[0];
        

        Papa.parse(upload, {
            complete: (results) => {
                const { data } = results;
                const [headers, ...parsed] = data as string[];
                const html = [];

                for (const header of headers) {
                    html.push(`<div class="tag-button">
                        <button type="button">${header}</button>
                    </div>`);
                    _headers.push(header);
                }
                _data.push(...parsed);
                generateRecords();
                list.innerHTML = html.join('');
            }
        })
    })
    list.addEventListener('click', ({ target }) => {
        const el = (target as HTMLElement).closest('.tag-button button');

        if (!el) return;

        const index = _headers.indexOf(el.textContent);

        if (index > -1) {
            _headers.splice(index, 1);
            generateRecords();
        }
    });

    const ACCT_NO = 'Patient Acct No';
    type FixAcctNumber = {
        ['Patient Acct No']: number;
        [index:string]: string|number;
    }
    

    const fixAcctNumber = (obj:FixAcctNumber) => {
        if (typeof obj[ACCT_NO] === 'string') obj[ACCT_NO] = +obj[ACCT_NO];

        return obj;
    }

    const sortByAcctNumber = (arr:FixAcctNumber[]) => {
        const records = arr.map((obj) => fixAcctNumber(obj));
        let filteredRecords = records.reduce<{}[]>((acc, curr) => {
        
            if (acc.findIndex(r => r[ACCT_NO] === curr[ACCT_NO]) === -1) {
                acc.push(curr);
            }
            return acc;
        }, []);
        filteredRecords = filteredRecords.sort((a,b) => {
            return a[ACCT_NO] - b[ACCT_NO]
        })

        return filteredRecords;
    }

    form.addEventListener('submit', async function formSubmit(e) {
        e.preventDefault();
        
        _records = sortByAcctNumber(_records as FixAcctNumber[]);

        form.removeEventListener('submit', formSubmit);
        form.submit();
    })
</script>
<style is:inline>
    summary {
        user-select: none;
    }
    summary + * {
        margin-top: 1rem;
    }
</style>