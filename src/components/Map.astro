---
import TotalMarkers from './TotalMarkers.astro';
import { groq, useSanityClient } from 'astro-sanity';
const {
    defaultRadius 
} = Astro.props;
let markersData = [];
if (Astro.cookies.get('document-id').value !== '') {
    const client = useSanityClient();

    const query = groq`*[_type == 'patient-group' && reference == "${Astro.cookies.get('document-id').value}"]`

    const result = await client.fetch(query);

    result.forEach(({ group }) => {
        markersData = markersData.concat(group.map((g:string) => JSON.parse(g)));
    });
}

---
<div id="map" data-default-radius={defaultRadius}  data-markers={JSON.stringify(markersData)}></div>
<TotalMarkers />
<script>
    import { Clusterer } from '../lib/Clusterer';
    import { library } from '../lib/google-loader';
    import { Circles } from '../lib/Circles';
    import { Markers } from '../lib/Markers';
    import { _markers, Clinics } from '../lib/data';
    import { on } from '../lib/Events';

    const _map = document.getElementById('map') as HTMLDivElement;
    const markersData = JSON.parse(_map.dataset.markers);

    const { Map } = await library.maps.importLibrary('maps');

    async function getClinicsBounds() {
        const { LatLng, LatLngBounds } = await library.maps.importLibrary('core');

        const boundsInitial = new LatLngBounds(Clinics[0]);
        
        Clinics.forEach(clinic => boundsInitial.extend(new LatLng(clinic)));
        
        return boundsInitial;
    }
    const bounds = await getClinicsBounds();
    
    const center = bounds.getCenter();
    
    const map = new Map(_map, {
        center,
        zoom: 10,
        disableDefaultUI: true,
    });
    
    
    type Marker = {
        setVisible: (isVisible: boolean) => void;
        getCenter: () => number;
    }
    const fakeMarkers = _markers(Clinics, markersData);

    const markers = new Markers(fakeMarkers, map, bounds);


    map.setCenter(bounds.getCenter());
    map.fitBounds(bounds);

    map.controls[library.maps.ControlPosition.TOP_RIGHT].push(document.querySelector('.totalmarkers--wrapper'));

    interface FilterFunction {
        circles?: Circles;
        marker?: typeof library.maps.Marker;
        clusterer?: Clusterer;
        value?: string|string[];
    }

    type Filters = {
        [index: string]: unknown|((args:FilterFunction) => boolean);
    }

    const noop = () => {};
    let activeClinics = [];
    const filters:Filters = {
        isInBounds: ({ marker, circles }) => {
            if (activeClinics.length === 0) {
                circles.showAll();

                return true;
            }

            circles.hide(activeClinics);

            const inCircle = circles.calculateInCircle(marker, activeClinics);
            return inCircle;
        },
        'Patient Gender': false,
        'Patient Race': []
    };

    interface UpdateFilterArgs {
        value?: string|string[];
        clear?: boolean;
    }

    /** Based on answer here: https://stackoverflow.com/a/64084454 */
    const updateFilter = ({ value, clear }:UpdateFilterArgs) => {
        const markersToShow = markers.filter(m => {
            if (clear) return true;

            let shouldShow = true;
            for (const [key, val ] of Object.entries(filters)) {
                if (Array.isArray(val)) {
                    
                    if (val.length === 0) continue;
                    if (!val.includes(m.data[key])) shouldShow = false;
                } else if (typeof val === 'function') {

                    if (value === undefined) continue;
                    if (!val({ marker: m, circles, clusterer, value })) {
                        shouldShow = false;
                    }
                } else {
                    
                    if (val === false) continue;
                    if (val !== m.data[key]) shouldShow = false;
                }
            }

            return shouldShow;
        });

        markers.setVisible(m => markersToShow.includes(m));
        clusterer.refresh();
    }
    
    
    let fRic: number;
    
    const clusterer = new Clusterer(markers.all(), map)
    
    const circles = new Circles(map, _map, +_map.dataset.defaultRadius, Clinics);

    const updateFilterArr = (arr:string[], value: string|string[]) => {
        const _temp = new Set<string>();

        if (Array.isArray(arr)) {
            arr.forEach((v) => _temp.add(v));
        }

        if (Array.isArray(value)) {
            value.forEach(v => _temp.add(v));

            _temp.forEach(v => {
                !value.includes(v) && _temp.delete(v);
            })
        } else {
            _temp.add(value);
        }

        const newArr = [..._temp];
        
        return newArr;
    }

    on('filters:change', ({ type, value }:{ type: string, value: string|string[] }) => {
        if (fRic) cancelIdleCallback(fRic);
        circles.hide(value);
        if (type === 'clinic') {
            activeClinics = updateFilterArr(activeClinics, value);
        }

        if (type === 'sex') {
            if (value === 'Any') {
                filters['Patient Gender'] = false;
            } else {
                filters['Patient Gender'] = (value as string).toLowerCase();
            }
        }
        
        if (type === 'race') {
            filters['Patient Race'] = value
        }

        markers.reset();
        updateFilter({ value });
    });

    on('filters:clear', () => {
        circles.showAll();
        Object.entries(filters).forEach(([key, value]) => {
            if (typeof value !== 'function') filters[key] = false;
        });
        markers.reset();
        activeClinics = [];
        updateFilter({ clear: true });
        
        clusterer.refresh();
    });

    on('filters:refresh', () => updateFilter({ value: activeClinics }));
</script>
<style>
    #map {
        width: 100%;
        height: 100vh;
        max-width: 100%;
    }
</style>